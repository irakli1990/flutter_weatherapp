import 'dart:async';import 'package:bloc/bloc.dart';import 'package:sunshine/models/weather.dart';import 'package:sunshine/models/weather_forecast.dart';import 'package:sunshine/repository/weather_repo.dart';import './bloc.dart';class WeatherBloc extends Bloc<WeatherEvent, WeatherState> {  WeatherRepository _weatherRepository;  WeatherBloc(WeatherRepository weatherRepository)      : _weatherRepository = weatherRepository;  @override  WeatherState get initialState => InitialWeatherState();  @override  Stream<WeatherState> mapEventToState(    WeatherEvent event,  ) async* {    if (event is GetWeatherEvent) {      yield WeatherLoadingState();      try {        WeatherModel weatherModel =            await _weatherRepository.getWeather(event.city);        yield WeatherLoadedState(weatherModel);      } on Exception catch (e) {        yield WeatherLoadingErrorState(error: e.toString());      }    }    if (event is GetWeatherForecastEvent) {      yield WeatherLoadingState();      try {        WeatherForecastModel weatherModel =            await _weatherRepository.getWeatherForecast(event.city);        yield WeatherLoadedState(weatherModel);      } on Exception catch (e) {        yield WeatherLoadingErrorState(error: e.toString());      }    }  }}